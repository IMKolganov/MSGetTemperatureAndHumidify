# app/config.py

import os

class Config:
    RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'localhost')
    MICROCONTROLLER_MANAGER_URL = os.getenv('MICROCONTROLLER_MANAGER_URL', 'http://localhost:4000')

    BACKEND_TO_MSGETTEMPERATUREANDHUMIDIFY_REQUEST_QUEUE = os.getenv('BACKEND_TO_MSGETTEMPERATUREANDHUMIDIFY_REQUEST_QUEUE', 'backend.to.msgettemperatureandhumidify.request')
    MSGETTEMPERATUREANDHUMIDIFY_TO_BACKEND_RESPONSE_QUEUE = os.getenv('MSGETTEMPERATUREANDHUMIDIFY_TO_BACKEND_RESPONSE_QUEUE', 'msgettemperatureandhumidify.to.backend.response')

    MSGETTEMPERATUREANDHUMIDIFY_TO_MSMICROCONTROLLERMANAGER_REQUEST_QUEUE = os.getenv('MSGETTEMPERATUREANDHUMIDIFY_TO_MSMICROCONTROLLERMANAGER_REQUEST_QUEUE', 'msgettemperatureandhumidify.to.msmicrocontrollermanager.request')
    MSMICROCONTROLLERMANAGER_TO_MSGETTEMPERATUREANDHUMIDIFY_RESPONSE_QUEUE = os.getenv('MSMICROCONTROLLERMANAGER_TO_MSGETTEMPERATUREANDHUMIDIFY_RESPONSE_QUEUE', 'msmicrocontrollermanager.to.msgettemperatureandhumidify.response')

    QUEUES = [
        BACKEND_TO_MSGETTEMPERATUREANDHUMIDIFY_REQUEST_QUEUE,
        MSGETTEMPERATUREANDHUMIDIFY_TO_BACKEND_RESPONSE_QUEUE,
        MSGETTEMPERATUREANDHUMIDIFY_TO_MSMICROCONTROLLERMANAGER_REQUEST_QUEUE,
        MSMICROCONTROLLERMANAGER_TO_MSGETTEMPERATUREANDHUMIDIFY_RESPONSE_QUEUE
    ]

class DevelopmentConfig(Config):
    DEBUG = True
    RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'localhost')
    MICROCONTROLLER_MANAGER_URL = os.getenv('MICROCONTROLLER_MANAGER_URL', 'http://localhost:4000')


class DockerConfig(Config):
    RABBITMQ_HOST = os.getenv('RABBITMQ_HOST', 'rabbitmq')
    MICROCONTROLLER_MANAGER_URL = os.getenv('MICROCONTROLLER_MANAGER_URL', 'http://microcontroller_manager:4000')
